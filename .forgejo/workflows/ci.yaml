name: CI and Release

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "v[0-9]+.[0-9]+.*"
  workflow_dispatch:

jobs:
  validate:
    runs-on: codeberg-tiny
    steps:
      - name: Checkout code
        uses: https://code.forgejo.org/actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: https://code.forgejo.org/actions/setup-go@v5
        with:
          go-version: ">=1.23"

      - name: Validate dependencies
        run: |
          go mod tidy
          git diff --exit-code go.mod
          git diff --exit-code go.sum

  release:
    needs: [validate]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: codeberg-tiny
    steps:
      - name: Checkout code
        uses: https://code.forgejo.org/actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: https://code.forgejo.org/actions/setup-go@v5
        with:
          go-version: ">=1.23"

      - name: Extract version
        id: release-info
        shell: bash
        run: |
          ref="${{ github.ref }}"
          if [[ $ref =~ ^refs/tags/ ]] ; then
            version=${ref#refs/tags/}
          fi
          version=${version#v}
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Build binary
        run: |
          VERSION=${{ steps.release-info.outputs.version }} \
          CGO_ENABLED=1 \
          go build -trimpath -ldflags="-s -w -X 'main.Version=$VERSION'" -o nvidiactl -v ./cmd/nvidiactl/...

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.release-info.outputs.version }}

          # Ensure the tag exists
          git fetch --tags

          echo "Creating release for version ${VERSION}"
          RELEASE_RESPONSE=$(curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/releases" \
            -d '{
              "tag_name": "v'"${VERSION}"'",
              "name": "v'"${VERSION}"'",
              "body": "Release v'"${VERSION}"'",
              "draft": false,
              "prerelease": false
            }')

          echo "Release response: ${RELEASE_RESPONSE}"
          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | grep -o '"id":[0-9]*' | head -n1 | cut -d':' -f2)

          if [ -z "$RELEASE_ID" ]; then
            echo "Failed to get release ID"
            exit 1
          fi

          echo "Release ID: ${RELEASE_ID}"
          echo "Uploading binary..."

          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @nvidiactl \
            "${{ github.api_url }}/repos/${{ github.repository }}/releases/${RELEASE_ID}/assets?name=nvidiactl"
